14:13 < mst__> _rene_, the toolkit unoapi tests are known to be flaky (in some 
               system dependent way) e.g. on the Win@6 tinderbox it always 
               crashes
14:14 < mst__> _rene_, sc.ScAccessible* tests also fail on some systems some of 
               the time

diff --git a/toolkit/Module_toolkit.mk b/toolkit/Module_toolkit.mk
index 25db0b6..14e507c 100644
--- a/toolkit/Module_toolkit.mk
+++ b/toolkit/Module_toolkit.mk
@@ -26,11 +26,11 @@ $(eval $(call gb_Module_add_targets,toolkit,\
 ifneq ($(OOO_JUNIT_JAR),)
 $(eval $(call gb_Module_add_subsequentcheck_targets,toolkit,\
     JunitTest_toolkit_complex \
-    JunitTest_toolkit_unoapi_1 \
-    JunitTest_toolkit_unoapi_2 \
-    JunitTest_toolkit_unoapi_3 \
-    JunitTest_toolkit_unoapi_4 \
 ))
 endif
+#    JunitTest_toolkit_unoapi_1 \
+#    JunitTest_toolkit_unoapi_2 \
+#    JunitTest_toolkit_unoapi_3 \
+#    JunitTest_toolkit_unoapi_4 \
 
 # vim: set noet sw=4 ts=4:
diff --git a/sc/qa/unoapi/sc_1.sce b/sc/qa/unoapi/sc_1.sce
index fa1684c..cc8e1a5 100644
--- a/sc/qa/unoapi/sc_1.sce
+++ b/sc/qa/unoapi/sc_1.sce
@@ -24,10 +24,3 @@
 # i84554 -o sc.AccessibleEditableTextPara_PreviewNote
 # i88241 -o sc.AccessibleEditableTextPara_HeaderFooter
 -o sc.AccessibleEditableTextPara_PreviewCell
--o sc.ScAccessibleCell
-# i91044 -o sc.ScAccessibleCsvCell
-# i91044 -o sc.ScAccessibleCsvGrid
-# i84641 -o sc.ScAccessibleCsvRuler
-# i88330 -o sc.ScAccessibleDocument
-# i91045 -o sc.ScAccessibleDocumentPagePreview
--o sc.ScAccessiblePageHeader
diff --git a/sc/qa/unoapi/sc_2.sce b/sc/qa/unoapi/sc_2.sce
index dbfc3e1..d235c5d 100644
--- a/sc/qa/unoapi/sc_2.sce
+++ b/sc/qa/unoapi/sc_2.sce
@@ -15,11 +15,6 @@
 #   except in compliance with the License. You may obtain a copy of
 #   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 #
-# fdo#FOO -o sc.ScAccessiblePageHeaderArea
--o sc.ScAccessiblePreviewCell
--o sc.ScAccessiblePreviewHeaderCell
--o sc.ScAccessiblePreviewTable
-# fdo#45337 -o sc.ScAccessibleSpreadsheet
 # FIXME_REMOVE_WHEN_RE_BASE_COMPLETE
 # -o sc.ScAnnotationObj
 # -o sc.ScAnnotationShapeObj

20:42 <@vmiklos> _rene_: yes?
20:43 < _rene_> vmiklos: see the ml. works, but that of course is not a fix for the test :)
20:43 < _rene_> s/works/lloconv works/
20:43 < _rene_> vmiklos: and as a test failure is fatal (at least on i386/amd64)..
20:44 < loircbot> LibreOffice (core) vmiklos *  (3 files in 3 dirs): tdf#83300 DOCX import: 'TOC Heading' should not be 'keep with next' by default
20:44 <@vmiklos> _rene_: thanks for testing. yes, but then my idea that perhaps the part to fix is the testcase, not the real code may be true at the end :)
20:45 < _rene_> yeah, or how the test is run (deinit?)
20:45 < _rene_> because it does say OK...
20:45 < _rene_> and then SIGSEGVs ;)
20:46 < loircbot> LibreOffice (core) [feature/glyphy] tml * external/glyphy/glyphy-windows.patch.1: Update the GLyphy patch for Windows
20:48 <@vmiklos> _rene_: aah, actually it may be a real bug then -- IIRC lloconv has some dirty _exit() hack..
[...]
11:21 < _rene_> vmiklos: I think I'll revert to non-libmerged to get that test 
                fixed for beta1. I don't like having all tests disabled. can 
                live with it for a alpha, but...
11:22 < _rene_> but merged-nonmerged-merged ping-pong is also not ideal ;)
11:22 < bubli> tml__: No way I do :P
11:22 < _rene_> especially as I would differentiate from official TDF builds 
                with not-libmerged..
[...]
11:48 <@vmiklos> _rene_: right, either revert to non-merged or patch/sed out 
                 that single test for now.

diff --git a/libreofficekit/Module_libreofficekit.mk b/libreofficekit/Module_libreofficekit.mk
index 0b2fd4a..ae40d59 100644
--- a/libreofficekit/Module_libreofficekit.mk
+++ b/libreofficekit/Module_libreofficekit.mk
@@ -11,9 +11,9 @@ $(eval $(call gb_Module_Module,libreofficekit))
     CppunitTest_libreofficekit_checkapi \
 ))
 
-$(eval $(call gb_Module_add_subsequentcheck_targets,libreofficekit,\
-    CppunitTest_libreofficekit_tiledrendering \
-))
+#$(eval $(call gb_Module_add_subsequentcheck_targets,libreofficekit,\
+#    CppunitTest_libreofficekit_tiledrendering \
+#))
 
 ifneq ($(ENABLE_GTK3),)
 $(eval $(call gb_Module_add_targets,libreofficekit,\

12:18 < _rene_> chris_wot: ping?
12:18 < chris_wot> heya
12:18 < chris_wot> you pinged?
12:19 < _rene_> chris_wot: any news on 
                https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=815292?
12:20 < _rene_> (of course the this-night-uploaded rc3 also failed)
12:21 < chris_wot> ah, sorry - I've looked at an EMF regression, but I've not 
                   gotten any further on that one
12:22 < chris_wot> I honestly think that for this one just disable the test for 
                   now
12:22 < chris_wot> I'll ping the ML

diff --git a/sw/qa/extras/ooxmlexport/ooxmlexport7.cxx b/sw/qa/extras/ooxmlexport/ooxmlexport7.cxx
index 54eed4d..78019bd 100644
--- a/sw/qa/extras/ooxmlexport/ooxmlexport7.cxx
+++ b/sw/qa/extras/ooxmlexport/ooxmlexport7.cxx
@@ -1103,28 +1103,28 @@ DECLARE_OOXMLEXPORT_TEST(testTDF93675, "no-numlevel-but-indented.odt")
     assertXPath(pXmlDoc, "//w:ind", "start", "1418");
 }
 
-DECLARE_OOXMLEXPORT_TEST(testFlipAndRotateCustomShape, "flip_and_rotate.odt")
-{
-    xmlDocPtr pXmlDoc = parseExport("word/document.xml");
-    if (!pXmlDoc)
-        return;
-    // there should be no flipH and flipV attributes in this case
-    assertXPathNoAttribute(pXmlDoc, "//a:xfrm", "flipH");
-    assertXPathNoAttribute(pXmlDoc, "//a:xfrm", "flipV");
-    // check rotation angle
-    assertXPath(pXmlDoc, "//a:xfrm", "rot", "13500000");
-    // check the first few coordinates of the polygon
-#ifndef MACOSX /* Retina-related rounding rountrip error
-                * hard to smooth out due to the use of string compare
-                * instead of number */
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[1]/a:pt", "x", "2351");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[1]/a:pt", "y", "3171");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[2]/a:pt", "x", "1695");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[2]/a:pt", "y", "3171");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[3]/a:pt", "x", "1695");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[3]/a:pt", "y", "1701");
-#endif
-}
+//DECLARE_OOXMLEXPORT_TEST(testFlipAndRotateCustomShape, "flip_and_rotate.odt")
+//{
+//    xmlDocPtr pXmlDoc = parseExport("word/document.xml");
+//    if (!pXmlDoc)
+//        return;
+//    // there should be no flipH and flipV attributes in this case
+//    assertXPathNoAttribute(pXmlDoc, "//a:xfrm", "flipH");
+//    assertXPathNoAttribute(pXmlDoc, "//a:xfrm", "flipV");
+//    // check rotation angle
+//    assertXPath(pXmlDoc, "//a:xfrm", "rot", "13500000");
+//    // check the first few coordinates of the polygon
+//#ifndef MACOSX /* Retina-related rounding rountrip error
+//                * hard to smooth out due to the use of string compare
+//                * instead of number */
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[1]/a:pt", "x", "2351");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[1]/a:pt", "y", "3171");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[2]/a:pt", "x", "1695");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[2]/a:pt", "y", "3171");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[3]/a:pt", "x", "1695");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[3]/a:pt", "y", "1701");
+//#endif
+//}
 
 #endif
 
