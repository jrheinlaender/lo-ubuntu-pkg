From: Bjoern Michaelsen <bjoern.michaelsen@canonical.com>
Date: Mon, 19 May 2014 15:01:05 +0200
Subject: [PATCH] Revert "fdo#73115: Always run timeouts as events"

This reverts commit 7dba6e0a71d090f06a6a1a39e87572674593b48a.

Change-Id: Ibda3a6b81c37cc997597c71fb7d2355018cd9768
---
 vcl/unx/kde4/KDEXLib.cxx | 10 +++-------
 1 file changed, 3 insertions(+), 7 deletions(-)

diff --git a/vcl/unx/kde4/KDEXLib.cxx b/vcl/unx/kde4/KDEXLib.cxx
--- a/vcl/unx/kde4/KDEXLib.cxx
+++ b/vcl/unx/kde4/KDEXLib.cxx
@@ -55,13 +55,9 @@ KDEXLib::KDEXLib() :
     m_frameWidth( -1 ), m_isGlibEventLoopType(false),
     m_haveQt4SocketExcludeFix(false)
 {
-    // the timers created here means they belong to the main thread.
-    // As the timeoutTimer runs the LO event queue, which may block on a dialog,
-    // the timer has to use a Qt::QueuedConnection, otherwise the nested event
-    // loop will detect the blocking timer and drop it from the polling
-    // freezing LO X11 processing.
-    connect( &timeoutTimer, SIGNAL( timeout()), this, SLOT( timeoutActivated()), Qt::QueuedConnection );
-    connect( &userEventTimer, SIGNAL( timeout()), this, SLOT( userEventActivated()), Qt::QueuedConnection );
+    // the timers created here means they belong to the main thread
+    connect( &timeoutTimer, SIGNAL( timeout()), this, SLOT( timeoutActivated()));
+    connect( &userEventTimer, SIGNAL( timeout()), this, SLOT( userEventActivated()));
 
     // QTimer::start() can be called only in its (here main) thread, so this will
     // forward between threads if needed
-- 
1.9.1

