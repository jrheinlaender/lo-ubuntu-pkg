From 6b2b87fc1f83ce77679e809790cc0d4d9100c4bd Mon Sep 17 00:00:00 2001
From: Bjoern Michaelsen <bjoern.michaelsen@canonical.com>
Date: Mon, 7 Apr 2014 14:16:40 +0200
Subject: [PATCH 1/3] Revert "fdo#73115: Always run timeouts as events"

This reverts commit 7dba6e0a71d090f06a6a1a39e87572674593b48a.
---
 vcl/unx/kde4/KDEXLib.cxx | 10 +++-------
 1 file changed, 3 insertions(+), 7 deletions(-)

diff --git a/vcl/unx/kde4/KDEXLib.cxx b/vcl/unx/kde4/KDEXLib.cxx
index 4a9b70b..b4be6d6 100644
--- a/vcl/unx/kde4/KDEXLib.cxx
+++ b/vcl/unx/kde4/KDEXLib.cxx
@@ -67,13 +67,9 @@ KDEXLib::KDEXLib() :
     eventLoopType( LibreOfficeEventLoop ),
     m_bYieldFrozen( false )
 {
-    // the timers created here means they belong to the main thread.
-    // As the timeoutTimer runs the LO event queue, which may block on a dialog,
-    // the timer has to use a Qt::QueuedConnection, otherwise the nested event
-    // loop will detect the blocking timer and drop it from the polling
-    // freezing LO X11 processing.
-    connect( &timeoutTimer, SIGNAL( timeout()), this, SLOT( timeoutActivated()), Qt::QueuedConnection );
-    connect( &userEventTimer, SIGNAL( timeout()), this, SLOT( userEventActivated()), Qt::QueuedConnection );
+    // the timers created here means they belong to the main thread
+    connect( &timeoutTimer, SIGNAL( timeout()), this, SLOT( timeoutActivated()));
+    connect( &userEventTimer, SIGNAL( timeout()), this, SLOT( userEventActivated()));
 
     // QTimer::start() can be called only in its (here main) thread, so this will
     // forward between threads if needed
-- 
1.9.1

