From: Seyeong Kim <seyeong.kim@canonical.com>
Date: Sat, 16 Aug 2014 05:25:32 +0200
Subject: [PATCH] fdo#77382, lp#1342175: fix performance with find & replace w/
 empty value
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

this cherry-picks three master commits:
 1cf19ea84794ca065749667b480dfed2d27d47b7
    don't call ScMarkData::GetMarkedRanges in ScColumn, related fdo#79422
 1e721077b43de84edab2a3ed2f316ddcbec6e3ec
    fdo#83141: optimize slow performance after when using replaceall or searchall
    Reviewed-on: https://gerrit.libreoffice.org/11829
 91502a72c12c559442e8bf77c27a516b49c2a68d
    fdo#83141: also optimize ScTable::HasAttribSelection
    Reviewed-on: https://gerrit.libreoffice.org/11877

Reviewed-on: https://gerrit.libreoffice.org/13041
Reviewed-by: Seyeong Kim <seyeong.kim@canonical.com>
Reviewed-by: Björn Michaelsen <bjoern.michaelsen@canonical.com>
Tested-by: Björn Michaelsen <bjoern.michaelsen@canonical.com>

Conflicts:
	sc/source/core/data/table2.cxx

Change-Id: I2df0eeefbe27b6a267e960f9ffedab0d4774c8a8
---
 sc/inc/column.hxx                     |  3 ++-
 sc/inc/columnspanset.hxx              | 12 ++++++++++++
 sc/inc/markdata.hxx                   |  4 ++++
 sc/source/core/data/column2.cxx       |  4 ++--
 sc/source/core/data/columnspanset.cxx | 14 +++++++++++--
 sc/source/core/data/markdata.cxx      | 37 +++++++++++++++++++++++++++++++++++
 sc/source/core/data/table2.cxx        | 31 +++++++++++++++++++++--------
 sc/source/core/data/table3.cxx        |  4 +++-
 8 files changed, 95 insertions(+), 14 deletions(-)

diff --git a/sc/inc/column.hxx b/sc/inc/column.hxx
--- a/sc/inc/column.hxx
+++ b/sc/inc/column.hxx
@@ -24,6 +24,7 @@
 #include "global.hxx"
 #include "address.hxx"
 #include "rangenam.hxx"
+#include "rangelst.hxx"
 #include "types.hxx"
 #include "mtvelements.hxx"
 #include "formula/types.hxx"
@@ -255,7 +256,7 @@ public:
     ScAttrIterator* CreateAttrIterator( SCROW nStartRow, SCROW nEndRow ) const;
 
     void UpdateSelectionFunction(
-        const ScMarkData& rMark, ScFunctionData& rData, ScFlatBoolRowSegments& rHiddenRows );
+        const ScRangeList& rRanges, ScFunctionData& rData, ScFlatBoolRowSegments& rHiddenRows );
 
     void CopyToColumn(
         sc::CopyToDocContext& rCxt, SCROW nRow1, SCROW nRow2, sal_uInt16 nFlags, bool bMarked,
diff --git a/sc/inc/columnspanset.hxx b/sc/inc/columnspanset.hxx
--- a/sc/inc/columnspanset.hxx
+++ b/sc/inc/columnspanset.hxx
@@ -20,6 +20,7 @@ class ScDocument;
 class ScColumn;
 class ScMarkData;
 class ScRange;
+class ScRangeList;
 
 namespace sc {
 
@@ -33,6 +34,15 @@ struct RowSpan
     RowSpan(SCROW nRow1, SCROW nRow2);
 };
 
+struct SC_DLLPUBLIC ColRowSpan
+{
+    SCCOLROW mnStart;
+    SCCOLROW mnEnd;
+
+    ColRowSpan(SCCOLROW nStart, SCCOLROW nEnd);
+};
+
+
 /**
  * Structure that stores segments of boolean flags per column, and perform
  * custom action on those segments.
@@ -124,6 +134,8 @@ public:
      */
     void scan(const ScMarkData& rMark, SCTAB nTab, SCCOL nCol);
 
+    void scan(const ScRangeList& rRanges, SCTAB nTab, SCCOL nCol);
+
     void set(SCROW nRow1, SCROW nRow2, bool bVal);
 
     void getRows(std::vector<SCROW> &rRows) const;
diff --git a/sc/inc/markdata.hxx b/sc/inc/markdata.hxx
--- a/sc/inc/markdata.hxx
+++ b/sc/inc/markdata.hxx
@@ -29,6 +29,7 @@
 namespace sc {
 
 struct RowSpan;
+struct ColRowSpan;
 
 }
 
@@ -106,6 +107,9 @@ public:
 
     void        MarkFromRangeList( const ScRangeList& rList, bool bReset );
 
+    std::vector<sc::ColRowSpan> GetMarkedRowSpans() const;
+    std::vector<sc::ColRowSpan> GetMarkedColSpans() const;
+
     SCCOLROW    GetMarkColumnRanges( SCCOLROW* pRanges );
     SCCOLROW    GetMarkRowRanges( SCCOLROW* pRanges );
 
diff --git a/sc/source/core/data/column2.cxx b/sc/source/core/data/column2.cxx
--- a/sc/source/core/data/column2.cxx
+++ b/sc/source/core/data/column2.cxx
@@ -3352,10 +3352,10 @@ public:
 
 //  multiple selections:
 void ScColumn::UpdateSelectionFunction(
-    const ScMarkData& rMark, ScFunctionData& rData, ScFlatBoolRowSegments& rHiddenRows )
+    const ScRangeList& rRanges, ScFunctionData& rData, ScFlatBoolRowSegments& rHiddenRows )
 {
     sc::SingleColumnSpanSet aSpanSet;
-    aSpanSet.scan(rMark, nTab, nCol); // mark all selected rows.
+    aSpanSet.scan(rRanges, nTab, nCol); // mark all selected rows.
 
     // Exclude all hidden rows.
     ScFlatBoolRowSegments::RangeData aRange;
diff --git a/sc/source/core/data/columnspanset.cxx b/sc/source/core/data/columnspanset.cxx
--- a/sc/source/core/data/columnspanset.cxx
+++ b/sc/source/core/data/columnspanset.cxx
@@ -45,6 +45,8 @@ public:
 
 RowSpan::RowSpan(SCROW nRow1, SCROW nRow2) : mnRow1(nRow1), mnRow2(nRow2) {}
 
+ColRowSpan::ColRowSpan(SCCOLROW nStart, SCCOLROW nEnd) : mnStart(nStart), mnEnd(nEnd) {}
+
 ColumnSpanSet::ColumnType::ColumnType(SCROW nStart, SCROW nEnd, bool bInit) :
     maSpans(nStart, nEnd+1, bInit), miPos(maSpans.begin()) {}
 
@@ -275,9 +277,17 @@ void SingleColumnSpanSet::scan(const ScMarkData& rMark, SCTAB nTab, SCCOL nCol)
         return;
 
     ScRangeList aRanges = rMark.GetMarkedRanges();
-    for (size_t i = 0, n = aRanges.size(); i < n; ++i)
+    scan(aRanges, nTab, nCol);
+}
+
+void SingleColumnSpanSet::scan(const ScRangeList& rRanges, SCTAB nTab, SCCOL nCol)
+{
+    for (size_t i = 0, n = rRanges.size(); i < n; ++i)
     {
-        const ScRange* p = aRanges[i];
+        const ScRange* p = rRanges[i];
+        if (nTab < p->aStart.Tab() || p->aEnd.Tab() < nTab)
+            continue;
+
         if (nCol < p->aStart.Col() || p->aEnd.Col() < nCol)
             // This column is not in this range. Skip it.
             continue;
diff --git a/sc/source/core/data/markdata.cxx b/sc/source/core/data/markdata.cxx
--- a/sc/source/core/data/markdata.cxx
+++ b/sc/source/core/data/markdata.cxx
@@ -21,6 +21,9 @@
 #include "markarr.hxx"
 #include "rangelst.hxx"
 #include <columnspanset.hxx>
+#include <fstalgorithm.hxx>
+
+#include <mdds/flat_segment_tree.hpp>
 
 // STATIC DATA -----------------------------------------------------------
 
@@ -434,6 +437,40 @@ ScRangeList ScMarkData::GetMarkedRanges() const
     return aRet;
 }
 
+std::vector<sc::ColRowSpan> ScMarkData::GetMarkedRowSpans() const
+{
+    typedef mdds::flat_segment_tree<SCCOLROW, bool> SpansType;
+
+    ScRangeList aRanges = GetMarkedRanges();
+    SpansType aSpans(0, MAXROW+1, false);
+    SpansType::const_iterator itPos = aSpans.begin();
+
+    for (size_t i = 0, n = aRanges.size(); i < n; ++i)
+    {
+        const ScRange& r = *aRanges[i];
+        itPos = aSpans.insert(itPos, r.aStart.Row(), r.aEnd.Row()+1, true).first;
+    }
+
+    return sc::toSpanArray<SCCOLROW, sc::ColRowSpan>(aSpans);
+}
+
+std::vector<sc::ColRowSpan> ScMarkData::GetMarkedColSpans() const
+{
+    typedef mdds::flat_segment_tree<SCCOLROW, bool> SpansType;
+
+    ScRangeList aRanges = GetMarkedRanges();
+    SpansType aSpans(0, MAXCOL+1, false);
+    SpansType::const_iterator itPos = aSpans.begin();
+
+    for (size_t i = 0, n = aRanges.size(); i < n; ++i)
+    {
+        const ScRange& r = *aRanges[i];
+        itPos = aSpans.insert(itPos, r.aStart.Col(), r.aEnd.Col()+1, true).first;
+    }
+
+    return sc::toSpanArray<SCCOLROW, sc::ColRowSpan>(aSpans);
+}
+
 SCCOLROW ScMarkData::GetMarkColumnRanges( SCCOLROW* pRanges )
 {
     if (bMarked)
diff --git a/sc/source/core/data/table2.cxx b/sc/source/core/data/table2.cxx
--- a/sc/source/core/data/table2.cxx
+++ b/sc/source/core/data/table2.cxx
@@ -49,6 +49,7 @@
 #include "mtvcellfunc.hxx"
 #include "refupdatecontext.hxx"
 #include "scopetools.hxx"
+#include "columnspanset.hxx"
 #include <refhint.hxx>
 
 #include "scitems.hxx"
@@ -1897,10 +1898,17 @@ bool ScTable::HasAttrib( SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCROW nRow2, sal
 
 bool ScTable::HasAttribSelection( const ScMarkData& rMark, sal_uInt16 nMask ) const
 {
-    bool bFound = false;
-    for (SCCOL i=0; i<=MAXCOL && !bFound; i++)
-        bFound |= aCol[i].HasAttribSelection( rMark, nMask );
-    return bFound;
+    std::vector<sc::ColRowSpan> aSpans = rMark.GetMarkedColSpans();
+
+    for (size_t i = 0; i < aSpans.size(); ++i)
+    {
+        for (SCCOLROW j = aSpans[i].mnStart; j < aSpans[i].mnEnd; ++j)
+        {
+            if (aCol[j].HasAttribSelection(rMark, nMask))
+              return true;
+        }
+    }
+    return false;
 }
 
 
@@ -2171,10 +2179,17 @@ bool ScTable::HasBlockMatrixFragment( SCCOL nCol1, SCROW nRow1, SCCOL nCol2, SCR
 
 bool ScTable::HasSelectionMatrixFragment( const ScMarkData& rMark ) const
 {
-    bool bFound = false;
-    for (SCCOL i=0; i<=MAXCOL && !bFound; i++)
-        bFound |= aCol[i].HasSelectionMatrixFragment(rMark);
-    return bFound;
+    std::vector<sc::ColRowSpan> aSpans = rMark.GetMarkedColSpans();
+
+    for ( size_t i=0; i<aSpans.size(); i++ )
+    {
+        for ( SCCOLROW j=aSpans[i].mnStart; j<aSpans[i].mnEnd; j++ )
+        {
+            if ( aCol[j].HasSelectionMatrixFragment(rMark) )
+                return true;
+        }
+    }
+    return false;
 }
 
 
diff --git a/sc/source/core/data/table3.cxx b/sc/source/core/data/table3.cxx
--- a/sc/source/core/data/table3.cxx
+++ b/sc/source/core/data/table3.cxx
@@ -63,6 +63,7 @@
 #include <refhint.hxx>
 #include <listenerquery.hxx>
 #include <bcaslot.hxx>
+#include "rangelst.hxx"
 
 #include "svl/sharedstringpool.hxx"
 
@@ -3034,12 +3035,13 @@ xub_StrLen ScTable::GetMaxNumberStringLen(
 
 void ScTable::UpdateSelectionFunction( ScFunctionData& rData, const ScMarkData& rMark )
 {
+    ScRangeList aRanges = rMark.GetMarkedRanges();
     for (SCCOL nCol = 0; nCol <= MAXCOL && !rData.bError; ++nCol)
     {
         if (pColFlags && ColHidden(nCol))
             continue;
 
-        aCol[nCol].UpdateSelectionFunction(rMark, rData, *mpHiddenRows);
+        aCol[nCol].UpdateSelectionFunction(aRanges, rData, *mpHiddenRows);
     }
 }
 
-- 
1.9.1

