From 845504c1dd804e6b86a924e866bb27ac0c831cb9 Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Fri, 20 Aug 2021 09:21:56 +0200
Subject: [PATCH 1/5] Revert "Fix some warnings for Raspberry pi 4 (part4)"

This reverts commit 610ceb05025c9c7a9a34dddcb0dac506b8eab441.
---
 .../source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx | 11 ++++---
 .../source/cpp_uno/gcc3_linux_arm/except.cxx  | 32 +++++++++---------
 .../source/cpp_uno/gcc3_linux_arm/rtti.hxx    | 33 +++++++++++++++++++
 3 files changed, 55 insertions(+), 21 deletions(-)
 create mode 100644 bridges/source/cpp_uno/gcc3_linux_arm/rtti.hxx

diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx b/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
index 103f2b492e3a..aaba8ffb7b6d 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
@@ -272,7 +272,8 @@ namespace
             }
             if (pReturnTypeDescr)
             {
-                typelib_TypeClass eRet = pReturnTypeDescr->eTypeClass;
+                typelib_TypeClass eRet =
+                    static_cast<typelib_TypeClass>(pReturnTypeDescr->eTypeClass);
                 TYPELIB_DANGER_RELEASE( pReturnTypeDescr );
                 return eRet;
             }
@@ -380,7 +381,7 @@ namespace
             {
                 typelib_TypeDescription * pTD = nullptr;
                 TYPELIB_DANGER_GET(&pTD,
-                    static_cast<Type *>(pCallStack[2])->getTypeLibType());
+                    reinterpret_cast<Type *>(pCallStack[2])->getTypeLibType());
                 if (pTD)
                 {
                     XInterface * pInterface = nullptr;
@@ -392,7 +393,7 @@ namespace
                     if (pInterface)
                     {
                         ::uno_any_construct(
-                            static_cast< uno_Any * >( pCallStack[0] ),
+                            reinterpret_cast< uno_Any * >( pCallStack[0] ),
                             &pInterface, pTD, cpp_acquire );
                         pInterface->release();
                         TYPELIB_DANGER_RELEASE( pTD );
@@ -575,8 +576,8 @@ void bridges::cpp_uno::shared::VtableFactory::flushCode(
 {
 #ifndef ANDROID
    static void (*clear_cache)(unsigned char const*, unsigned char const*)
-       = reinterpret_cast<void (*)(unsigned char const*, unsigned char const*)>
-           (dlsym(RTLD_DEFAULT, "__clear_cache"));
+       = (void (*)(unsigned char const*, unsigned char const*))
+           dlsym(RTLD_DEFAULT, "__clear_cache");
    (*clear_cache)(beg, end);
 #else
    cacheflush((long) beg, (long) end, 0);
diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/except.cxx b/bridges/source/cpp_uno/gcc3_linux_arm/except.cxx
index 14bffa75ad7f..367604f3ed11 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/except.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/except.cxx
@@ -31,6 +31,7 @@
 #include <typelib/typedescription.hxx>
 #include <uno/any2.h>
 #include <unordered_map>
+#include "rtti.hxx"
 #include "share.hxx"
 
 
@@ -85,7 +86,6 @@ namespace CPPU_CURRENT_NAMESPACE
 #endif
     }
 
-namespace {
     class RTTI
     {
         typedef std::unordered_map< OUString, type_info * > t_rtti_map;
@@ -104,11 +104,10 @@ namespace {
 
         type_info * getRTTI(typelib_CompoundTypeDescription *);
     };
-}
 
     RTTI::RTTI()
 #ifndef ANDROID
-        : m_hApp( dlopen( nullptr, RTLD_LAZY ) )
+        : m_hApp( dlopen( 0, RTLD_LAZY ) )
 #endif
     {
     }
@@ -125,7 +124,7 @@ namespace {
     {
         type_info * rtti;
 
-        OUString const & unoName = *reinterpret_cast<OUString const *>(&pTypeDescr->aBase.pTypeName);
+        OUString const & unoName = *(OUString const *)&pTypeDescr->aBase.pTypeName;
 
         MutexGuard guard( m_mutex );
         t_rtti_map::const_iterator iFind( m_rttis.find( unoName ) );
@@ -147,7 +146,7 @@ namespace {
 
             OString symName( buf.makeStringAndClear() );
 #ifndef ANDROID
-            rtti = static_cast<type_info *>(dlsym( m_hApp, symName.getStr() ));
+            rtti = (type_info *)dlsym( m_hApp, symName.getStr() );
 #else
             rtti = (type_info *)dlsym( RTLD_DEFAULT, symName.getStr() );
 #endif
@@ -186,9 +185,10 @@ namespace {
                     if (pTypeDescr->pBaseTypeDescription)
                     {
                         // ensure availability of base
-                        type_info * base_rtti = getRTTI( pTypeDescr->pBaseTypeDescription );
+                        type_info * base_rtti = getRTTI(
+                            (typelib_CompoundTypeDescription *)pTypeDescr->pBaseTypeDescription );
                         rtti = new __si_class_type_info(
-                            strdup( rttiName ), static_cast<__class_type_info *>(base_rtti) );
+                            strdup( rttiName ), (__class_type_info *)base_rtti );
                     }
                     else
                     {
@@ -218,8 +218,8 @@ namespace {
 
     static void deleteException( void * pExc )
     {
-        __cxa_exception const * header = static_cast<__cxa_exception const *>(pExc) - 1;
-        typelib_TypeDescription * pTD = nullptr;
+        __cxa_exception const * header = ((__cxa_exception const *)pExc - 1);
+        typelib_TypeDescription * pTD = 0;
         OUString unoName( toUNOname( header->exceptionType->name() ) );
         ::typelib_typedescription_getByName( &pTD, unoName.pData );
         assert(pTD && "### unknown exception type! leaving out destruction => leaking!!!");
@@ -244,13 +244,13 @@ namespace {
 
         {
             // construct cpp exception object
-            typelib_TypeDescription * pTypeDescr = nullptr;
+            typelib_TypeDescription * pTypeDescr = 0;
             TYPELIB_DANGER_GET( &pTypeDescr, pUnoExc->pType );
             assert(pTypeDescr);
             if (! pTypeDescr)
             {
                 throw RuntimeException(
-                    "cannot get typedescription for type " +
+                    OUString("cannot get typedescription for type ") +
                     OUString::unacquired( &pUnoExc->pType->pTypeName ) );
             }
 
@@ -258,16 +258,16 @@ namespace {
             ::uno_copyAndConvertData( pCppExc, pUnoExc->pData, pTypeDescr, pUno2Cpp );
 
             // destruct uno exception
-            ::uno_any_destruct( pUnoExc, nullptr );
+            ::uno_any_destruct( pUnoExc, 0 );
             // avoiding locked counts
             static RTTI rtti_data;
-            rtti = rtti_data.getRTTI(reinterpret_cast<typelib_CompoundTypeDescription*>(pTypeDescr));
+            rtti = (type_info*)rtti_data.getRTTI((typelib_CompoundTypeDescription*)pTypeDescr);
             TYPELIB_DANGER_RELEASE( pTypeDescr );
             assert(rtti && "### no rtti for throwing exception!");
             if (! rtti)
             {
                 throw RuntimeException(
-                    "no rtti for type " +
+                    OUString("no rtti for type ") +
                     OUString::unacquired( &pUnoExc->pType->pTypeName ) );
             }
         }
@@ -278,7 +278,7 @@ namespace {
 #ifdef __ARM_EABI__
     static void* getAdjustedPtr(__cxa_exception* header)
     {
-        return reinterpret_cast<void*>(header->unwindHeader.barrier_cache.bitpattern[0]);
+        return (void*)header->unwindHeader.barrier_cache.bitpattern[0];
     }
 #else
     static void* getAdjustedPtr(__cxa_exception* header)
@@ -308,7 +308,7 @@ namespace {
         fprintf( stderr, "> c++ exception occurred: %s\n", cstr_unoName.getStr() );
 #endif
         typelib_typedescription_getByName( &pExcTypeDescr, unoName.pData );
-        if (nullptr == pExcTypeDescr)
+        if (0 == pExcTypeDescr)
         {
             RuntimeException aRE( "exception type not found: " + unoName );
             Type const & rType = cppu::UnoType<decltype(aRE)>::get();
diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/rtti.hxx b/bridges/source/cpp_uno/gcc3_linux_arm/rtti.hxx
new file mode 100644
index 000000000000..7057cb4ed161
--- /dev/null
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/rtti.hxx
@@ -0,0 +1,33 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This file is part of the LibreOffice project.
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * This file incorporates work covered by the following license notice:
+ *
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements. See the NOTICE file distributed
+ *   with this work for additional information regarding copyright
+ *   ownership. The ASF licenses this file to you under the Apache
+ *   License, Version 2.0 (the "License"); you may not use this file
+ *   except in compliance with the License. You may obtain a copy of
+ *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
+ */
+
+#pragma once
+
+#include <sal/config.h>
+
+#include <typeinfo>
+
+#include <typelib/typedescription.h>
+
+namespace arm
+{
+std::type_info* getRtti(typelib_TypeDescription const& type);
+}
+
+/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
-- 
2.32.0

From 0fc9c79cd60b3e7d0287e4bc5c76f1decdac7c4a Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Fri, 20 Aug 2021 09:22:02 +0200
Subject: [PATCH 2/5] Revert "Fix some warnings for Raspberry pi 4 (part3)"

This reverts commit dd91d3389c26645459d3b80649941d65efa4f63f.
---
 .../source/cpp_uno/gcc3_linux_arm/call.hxx    | 28 ------
 .../source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx | 95 +++++++++----------
 .../source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx | 82 ++++++++--------
 3 files changed, 88 insertions(+), 117 deletions(-)
 delete mode 100644 bridges/source/cpp_uno/gcc3_linux_arm/call.hxx

diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/call.hxx b/bridges/source/cpp_uno/gcc3_linux_arm/call.hxx
deleted file mode 100644
index dde56f6f59f0..000000000000
--- a/bridges/source/cpp_uno/gcc3_linux_arm/call.hxx
+++ /dev/null
@@ -1,28 +0,0 @@
-/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
-/*
- * This file is part of the LibreOffice project.
- *
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- *
- * This file incorporates work covered by the following license notice:
- *
- *   Licensed to the Apache Software Foundation (ASF) under one or more
- *   contributor license agreements. See the NOTICE file distributed
- *   with this work for additional information regarding copyright
- *   ownership. The ASF licenses this file to you under the Apache
- *   License, Version 2.0 (the "License"); you may not use this file
- *   except in compliance with the License. You may obtain a copy of
- *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
- */
-
-#pragma once
-
-#include <sal/config.h>
-
-#include <sal/types.h>
-
-extern "C" sal_Int64 cpp_vtable_call(long* pFunctionAndOffset, void** pCallStack);
-
-/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx b/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
index aaba8ffb7b6d..7abaed395488 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
@@ -33,7 +33,6 @@
 #include <vtablefactory.hxx>
 
 #include "share.hxx"
-#include "call.hxx"
 
 #include <dlfcn.h>
 
@@ -47,7 +46,7 @@ using namespace ::com::sun::star::uno;
 namespace
 {
 
-    typelib_TypeClass cpp2uno_call(
+    static typelib_TypeClass cpp2uno_call(
         bridges::cpp_uno::shared::CppInterfaceProxy* pThis,
         const typelib_TypeDescription * pMemberTypeDescr,
         typelib_TypeDescriptionReference * pReturnTypeRef,
@@ -56,21 +55,21 @@ namespace
         sal_Int64 * pRegisterReturn /* space for register return */ )
     {
         // pCallStack: ret, [return ptr], this, params
-        char * pTopStack = reinterpret_cast<char *>(pCallStack + 0);
+        char * pTopStack = (char *)(pCallStack + 0);
         char * pCppStack = pTopStack;
 
 #ifdef __ARM_PCS_VFP
         int dc = 0;
-        char * pFloatArgs = reinterpret_cast<char *>(pCppStack - 64);
+        char * pFloatArgs = (char *)(pCppStack - 64);
 #endif
         // return
-        typelib_TypeDescription * pReturnTypeDescr = nullptr;
+        typelib_TypeDescription * pReturnTypeDescr = 0;
         if (pReturnTypeRef)
             TYPELIB_DANGER_GET( &pReturnTypeDescr, pReturnTypeRef );
 
-        void * pUnoReturn = nullptr;
+        void * pUnoReturn = 0;
         // complex return ptr: if != 0 && != pUnoReturn, reconversion need
-        void * pCppReturn = nullptr;
+        void * pCppReturn = 0;
 
         if (pReturnTypeDescr)
         {
@@ -78,7 +77,7 @@ namespace
                 pUnoReturn = pRegisterReturn; // direct way for simple types
             else // complex return via ptr (pCppReturn)
             {
-                pCppReturn = *reinterpret_cast<void **>(pCppStack);
+                pCppReturn = *(void **)pCppStack;
                 pCppStack += sizeof(void *);
 
                 pUnoReturn = (bridges::cpp_uno::shared::relatesToInterfaceType(
@@ -94,21 +93,21 @@ namespace
         static_assert(sizeof(void *) == sizeof(sal_Int32),
             "### unexpected size!");
         // parameters
-        void ** pUnoArgs = static_cast<void **>(alloca( 4 * sizeof(void *) * nParams ));
+        void ** pUnoArgs = (void **)alloca( 4 * sizeof(void *) * nParams );
         void ** pCppArgs = pUnoArgs + nParams;
         // indices of values this have to be converted (interface conversion
         // cpp<=>uno)
-        sal_Int32 * pTempIndices = reinterpret_cast<sal_Int32 *>(pUnoArgs + (2 * nParams));
+        sal_Int32 * pTempIndices = (sal_Int32 *)(pUnoArgs + (2 * nParams));
         // type descriptions for reconversions
         typelib_TypeDescription ** ppTempParamTypeDescr =
-            reinterpret_cast<typelib_TypeDescription **>(pUnoArgs + (3 * nParams));
+            (typelib_TypeDescription **)(pUnoArgs + (3 * nParams));
 
         sal_Int32 nTempIndices   = 0;
 
         for ( sal_Int32 nPos = 0; nPos < nParams; ++nPos )
         {
             const typelib_MethodParameter & rParam = pParams[nPos];
-            typelib_TypeDescription * pParamTypeDescr = nullptr;
+            typelib_TypeDescription * pParamTypeDescr = 0;
             TYPELIB_DANGER_GET( &pParamTypeDescr, rParam.pTypeRef );
 
             if (!rParam.bOut &&
@@ -167,7 +166,7 @@ namespace
             }
             else // ptr to complex value | ref
             {
-                pCppArgs[nPos] = *reinterpret_cast<void **>(pCppStack);
+                pCppArgs[nPos] = *(void **)pCppStack;
 
                 if (! rParam.bIn) // is pure out
                 {
@@ -183,7 +182,7 @@ namespace
                 {
                     uno_copyAndConvertData( pUnoArgs[nPos] =
                         alloca( pParamTypeDescr->nSize ),
-                        *reinterpret_cast<void **>(pCppStack), pParamTypeDescr,
+                        *(void **)pCppStack, pParamTypeDescr,
                         pThis->getBridge()->getCpp2Uno() );
                     pTempIndices[nTempIndices] = nPos; // has to be reconverted
                     // will be released at reconversion
@@ -191,7 +190,7 @@ namespace
                 }
                 else // direct way
                 {
-                    pUnoArgs[nPos] = *reinterpret_cast<void **>(pCppStack);
+                    pUnoArgs[nPos] = *(void **)pCppStack;
                     // no longer needed
                     TYPELIB_DANGER_RELEASE( pParamTypeDescr );
                 }
@@ -224,7 +223,7 @@ namespace
 
                 if (pParams[nIndex].bIn) // is in/inout => was constructed
                     uno_destructData( pUnoArgs[nIndex],
-                        ppTempParamTypeDescr[nTempIndices], nullptr );
+                        ppTempParamTypeDescr[nTempIndices], 0 );
                 TYPELIB_DANGER_RELEASE( ppTempParamTypeDescr[nTempIndices] );
             }
             if (pReturnTypeDescr)
@@ -253,7 +252,7 @@ namespace
                         pParamTypeDescr, pThis->getBridge()->getUno2Cpp() );
                 }
                 // destroy temp uno param
-                uno_destructData( pUnoArgs[nIndex], pParamTypeDescr, nullptr );
+                uno_destructData( pUnoArgs[nIndex], pParamTypeDescr, 0 );
 
                 TYPELIB_DANGER_RELEASE( pParamTypeDescr );
             }
@@ -265,15 +264,15 @@ namespace
                     uno_copyAndConvertData( pCppReturn, pUnoReturn,
                         pReturnTypeDescr, pThis->getBridge()->getUno2Cpp() );
                     // destroy temp uno return
-                    uno_destructData( pUnoReturn, pReturnTypeDescr, nullptr );
+                    uno_destructData( pUnoReturn, pReturnTypeDescr, 0 );
                 }
                 // complex return ptr is set to eax
-                *reinterpret_cast<void **>(pRegisterReturn) = pCppReturn;
+                *(void **)pRegisterReturn = pCppReturn;
             }
             if (pReturnTypeDescr)
             {
                 typelib_TypeClass eRet =
-                    static_cast<typelib_TypeClass>(pReturnTypeDescr->eTypeClass);
+                    (typelib_TypeClass)pReturnTypeDescr->eTypeClass;
                 TYPELIB_DANGER_RELEASE( pReturnTypeDescr );
                 return eRet;
             }
@@ -283,7 +282,7 @@ namespace
     }
 
 
-    typelib_TypeClass cpp_mediate(
+    static typelib_TypeClass cpp_mediate(
         sal_Int32 nFunctionIndex, sal_Int32 nVtableOffset,
         void ** pCallStack,
         sal_Int64 * pRegisterReturn /* space for register return */ )
@@ -321,7 +320,7 @@ namespace
                 ("illegal " + OUString::unacquired(&pTypeDescr->aBase.pTypeName)
                  + " vtable index " + OUString::number(nFunctionIndex) + "/"
                  + OUString::number(pTypeDescr->nMapFunctionIndexToMemberIndex)),
-                reinterpret_cast<XInterface *>(pCppI));
+                (XInterface *)pCppI);
         }
 
         // determine called method
@@ -343,8 +342,8 @@ namespace
                 // is GET method
                 eRet = cpp2uno_call(
                     pCppI, aMemberDescr.get(),
-                    reinterpret_cast<typelib_InterfaceAttributeTypeDescription *>(aMemberDescr.get())->pAttributeTypeRef,
-                    0, nullptr, // no params
+                    ((typelib_InterfaceAttributeTypeDescription *)aMemberDescr.get())->pAttributeTypeRef,
+                    0, 0, // no params
                     pCallStack, pRegisterReturn );
             }
             else
@@ -352,13 +351,13 @@ namespace
                 // is SET method
                 typelib_MethodParameter aParam;
                 aParam.pTypeRef =
-                    reinterpret_cast<typelib_InterfaceAttributeTypeDescription *>(aMemberDescr.get())->pAttributeTypeRef;
-                aParam.bIn      = true;
-                aParam.bOut     = false;
+                    ((typelib_InterfaceAttributeTypeDescription *)aMemberDescr.get())->pAttributeTypeRef;
+                aParam.bIn      = sal_True;
+                aParam.bOut     = sal_False;
 
                 eRet = cpp2uno_call(
                     pCppI, aMemberDescr.get(),
-                    nullptr, // indicates void return
+                    0, // indicates void return
                     1, &aParam,
                     pCallStack, pRegisterReturn );
             }
@@ -379,16 +378,16 @@ namespace
                 break;
             case 0: // queryInterface() opt
             {
-                typelib_TypeDescription * pTD = nullptr;
+                typelib_TypeDescription * pTD = 0;
                 TYPELIB_DANGER_GET(&pTD,
                     reinterpret_cast<Type *>(pCallStack[2])->getTypeLibType());
                 if (pTD)
                 {
-                    XInterface * pInterface = nullptr;
+                    XInterface * pInterface = 0;
                     (*pCppI->getBridge()->getCppEnv()->getRegisteredInterface)(
                         pCppI->getBridge()->getCppEnv(),
-                        reinterpret_cast<void **>(&pInterface), pCppI->getOid().pData,
-                        reinterpret_cast<typelib_InterfaceTypeDescription *>(pTD) );
+                        (void **)&pInterface, pCppI->getOid().pData,
+                        (typelib_InterfaceTypeDescription *)pTD );
 
                     if (pInterface)
                     {
@@ -397,7 +396,7 @@ namespace
                             &pInterface, pTD, cpp_acquire );
                         pInterface->release();
                         TYPELIB_DANGER_RELEASE( pTD );
-                        *reinterpret_cast<void **>(pRegisterReturn) = pCallStack[0];
+                        *(void **)pRegisterReturn = pCallStack[0];
                         eRet = typelib_TypeClass_ANY;
                         break;
                     }
@@ -407,16 +406,16 @@ namespace
             default:
                 eRet = cpp2uno_call(
                     pCppI, aMemberDescr.get(),
-                    reinterpret_cast<typelib_InterfaceMethodTypeDescription *>(aMemberDescr.get())->pReturnTypeRef,
-                    reinterpret_cast<typelib_InterfaceMethodTypeDescription *>(aMemberDescr.get())->nParams,
-                    reinterpret_cast<typelib_InterfaceMethodTypeDescription *>(aMemberDescr.get())->pParams,
+                    ((typelib_InterfaceMethodTypeDescription *)aMemberDescr.get())->pReturnTypeRef,
+                    ((typelib_InterfaceMethodTypeDescription *)aMemberDescr.get())->nParams,
+                    ((typelib_InterfaceMethodTypeDescription *)aMemberDescr.get())->pParams,
                     pCallStack, pRegisterReturn );
             }
             break;
         }
         default:
         {
-            throw RuntimeException( "no member description found!", reinterpret_cast<XInterface *>(pCppI) );
+            throw RuntimeException( "no member description found!", (XInterface *)pCppI );
         }
         }
 
@@ -429,7 +428,7 @@ namespace
  * (called by asm snippets)
  */
 
-sal_Int64 cpp_vtable_call( long *pFunctionAndOffset,
+extern "C" sal_Int64 cpp_vtable_call( long *pFunctionAndOffset,
     void **pCallStack )
 {
     sal_Int64 nRegReturn;
@@ -440,17 +439,17 @@ sal_Int64 cpp_vtable_call( long *pFunctionAndOffset,
     {
         case typelib_TypeClass_BOOLEAN:
         case typelib_TypeClass_BYTE:
-            nRegReturn = static_cast<unsigned long>(*reinterpret_cast<unsigned char *>(&nRegReturn));
+            nRegReturn = (unsigned long)(*(unsigned char *)&nRegReturn);
             break;
         case typelib_TypeClass_CHAR:
         case typelib_TypeClass_UNSIGNED_SHORT:
         case typelib_TypeClass_SHORT:
-            nRegReturn = static_cast<unsigned long>(*reinterpret_cast<unsigned short *>(&nRegReturn));
+            nRegReturn = (unsigned long)(*(unsigned short *)&nRegReturn);
             break;
         case typelib_TypeClass_ENUM:
         case typelib_TypeClass_UNSIGNED_LONG:
         case typelib_TypeClass_LONG:
-            nRegReturn = static_cast<unsigned long>(*reinterpret_cast<unsigned int *>(&nRegReturn));
+            nRegReturn = (unsigned long)(*(unsigned int *)&nRegReturn);
             break;
         case typelib_TypeClass_VOID:
         default:
@@ -470,16 +469,16 @@ namespace
         if (bHasHiddenParam)
             functionIndex |= 0x80000000;
 
-        unsigned long * p = reinterpret_cast<unsigned long *>(code);
+        unsigned long * p = (unsigned long *)code;
 
         // ARM (not thumb) mode instructions
         // mov ip, pc
         *p++ = 0xE1A0C00F;
         // ldr pc, [pc, #4]
         *p++ = 0xE59FF004;
-        *p++ = static_cast<unsigned long>(functionIndex);
-        *p++ = static_cast<unsigned long>(vtableOffset);
-        *p++ = reinterpret_cast<unsigned long>(privateSnippetExecutor);
+        *p++ = (unsigned long)functionIndex;
+        *p++ = (unsigned long)vtableOffset;
+        *p++ = (unsigned long)privateSnippetExecutor;
 
         return code + codeSnippetSize;
     }
@@ -505,8 +504,8 @@ bridges::cpp_uno::shared::VtableFactory::initializeBlock(
     typelib_InterfaceTypeDescription *)
 {
     Slot * slots = mapBlockToVtable(block);
-    slots[-2].fn = nullptr;
-    slots[-1].fn = nullptr;
+    slots[-2].fn = 0;
+    slots[-1].fn = 0;
     return slots + slotCount;
 }
 
@@ -525,7 +524,7 @@ unsigned char * bridges::cpp_uno::shared::VtableFactory::addLocalFunctions(
     Slot * s = *slots;
     for (sal_Int32 i = 0; i < type->nMembers; ++i)
     {
-        typelib_TypeDescription * member = nullptr;
+        typelib_TypeDescription * member = 0;
         TYPELIB_DANGER_GET(&member, type->ppMembers[i]);
         assert(member != 0);
         switch (member->eTypeClass)
diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx b/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx
index 8533415ed087..bed9d7a0af96 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx
@@ -109,7 +109,7 @@ namespace arm
             if (p->ppTypeRefs[i]->eTypeClass == typelib_TypeClass_STRUCT ||
                 p->ppTypeRefs[i]->eTypeClass == typelib_TypeClass_EXCEPTION)
             {
-                typelib_TypeDescription * t = nullptr;
+                typelib_TypeDescription * t = 0;
                 TYPELIB_DANGER_GET(&t, p->ppTypeRefs[i]);
                 bool b = is_complex_struct(t);
                 TYPELIB_DANGER_RELEASE(t);
@@ -120,7 +120,7 @@ namespace arm
             else if (!bridges::cpp_uno::shared::isSimpleType(p->ppTypeRefs[i]->eTypeClass))
                 return true;
         }
-        if (p->pBaseTypeDescription != nullptr)
+        if (p->pBaseTypeDescription != 0)
             return is_complex_struct(&p->pBaseTypeDescription->aBase);
         return false;
     }
@@ -145,7 +145,7 @@ namespace arm
             return false;
         else if (pTypeRef->eTypeClass == typelib_TypeClass_STRUCT || pTypeRef->eTypeClass == typelib_TypeClass_EXCEPTION)
         {
-            typelib_TypeDescription * pTypeDescr = nullptr;
+            typelib_TypeDescription * pTypeDescr = 0;
             TYPELIB_DANGER_GET( &pTypeDescr, pTypeRef );
 
             //A Composite Type not larger than 4 bytes is returned in r0
@@ -298,9 +298,9 @@ void callVirtualMethod(
 
 #define INSERT_INT32( pSV, nr, pGPR, pDS ) \
         if ( nr < arm::MAX_GPR_REGS ) \
-                pGPR[nr++] = reinterpret_cast<sal_uInt32>( pSV ); \
+                pGPR[nr++] = *reinterpret_cast<sal_uInt32 *>( pSV ); \
         else \
-                *pDS++ = reinterpret_cast<sal_uInt32>( pSV );
+                *pDS++ = *reinterpret_cast<sal_uInt32 *>( pSV );
 
 #ifdef __ARM_EABI__
 #define INSERT_INT64( pSV, nr, pGPR, pDS, pStart ) \
@@ -310,8 +310,8 @@ void callVirtualMethod(
         } \
         if ( nr < arm::MAX_GPR_REGS ) \
         { \
-                *reinterpret_cast<sal_uInt32 *>(pGPR[nr++]) = *static_cast<sal_uInt32 *>( pSV ); \
-                *reinterpret_cast<sal_uInt32 *>(pGPR[nr++]) = *(static_cast<sal_uInt32 *>( pSV ) + 1); \
+                pGPR[nr++] = *reinterpret_cast<sal_uInt32 *>( pSV ); \
+                pGPR[nr++] = *(reinterpret_cast<sal_uInt32 *>( pSV ) + 1); \
         } \
         else \
     { \
@@ -319,8 +319,8 @@ void callVirtualMethod(
                 { \
                     ++pDS; \
                 } \
-                *reinterpret_cast<sal_uInt32 *>(*pDS++) = static_cast<sal_uInt32 *>( pSV )[0]; \
-                *reinterpret_cast<sal_uInt32 *>(*pDS++) = static_cast<sal_uInt32 *>( pSV )[1]; \
+                *pDS++ = reinterpret_cast<sal_uInt32 *>( pSV )[0]; \
+                *pDS++ = reinterpret_cast<sal_uInt32 *>( pSV )[1]; \
     }
 #else
 #define INSERT_INT64( pSV, nr, pGPR, pDS, pStart ) \
@@ -343,18 +343,18 @@ void callVirtualMethod(
             nSR = 2*nDR; \
         }\
         if ( nSR < arm::MAX_FPR_REGS*2 ) {\
-                pSPR[nSR++] = *static_cast<float const *>( pSV ); \
+                pSPR[nSR++] = *reinterpret_cast<float *>( pSV ); \
                 if ((nSR % 2 == 1) && (nSR > 2*nDR)) {\
                     nDR++; \
                 }\
         }\
         else \
         {\
-                *pDS++ = *static_cast<float const *>( pSV );\
+                *pDS++ = *reinterpret_cast<float *>( pSV );\
         }
 #define INSERT_DOUBLE( pSV, nr, pGPR, pDS, pStart ) \
         if ( nDR < arm::MAX_FPR_REGS ) { \
-                pFPR[nDR++] = *static_cast<double const *>( pSV ); \
+                pFPR[nDR++] = *reinterpret_cast<double *>( pSV ); \
         }\
         else\
         {\
@@ -362,7 +362,7 @@ void callVirtualMethod(
                 { \
                     ++pDS; \
                 } \
-            *reinterpret_cast<double *>(pDS) = *static_cast<double const *>( pSV );\
+            *(double *)pDS = *reinterpret_cast<double *>( pSV );\
             pDS += 2;\
         }
 #else
@@ -375,15 +375,15 @@ void callVirtualMethod(
 
 #define INSERT_INT16( pSV, nr, pGPR, pDS ) \
         if ( nr < arm::MAX_GPR_REGS ) \
-                pGPR[nr++] = *static_cast<sal_uInt16 const *>( pSV ); \
+                pGPR[nr++] = *reinterpret_cast<sal_uInt16 *>( pSV ); \
         else \
-                *pDS++ = *static_cast<sal_uInt16 const *>( pSV );
+                *pDS++ = *reinterpret_cast<sal_uInt16 *>( pSV );
 
 #define INSERT_INT8( pSV, nr, pGPR, pDS ) \
         if ( nr < arm::MAX_GPR_REGS ) \
-                pGPR[nr++] = *static_cast<sal_uInt8 const *>( pSV ); \
+                pGPR[nr++] = *reinterpret_cast<sal_uInt8 *>( pSV ); \
         else \
-                *pDS++ = *static_cast<sal_uInt8 const *>( pSV );
+                *pDS++ = *reinterpret_cast<sal_uInt8 *>( pSV );
 
 namespace {
 
@@ -411,11 +411,11 @@ void cpp_call(
 #endif
 
     // return
-    typelib_TypeDescription * pReturnTypeDescr = nullptr;
+    typelib_TypeDescription * pReturnTypeDescr = 0;
     TYPELIB_DANGER_GET( &pReturnTypeDescr, pReturnTypeRef );
     assert(pReturnTypeDescr);
 
-    void * pCppReturn = nullptr; // if != 0 && != pUnoReturn, needs reconversion
+    void * pCppReturn = 0; // if != 0 && != pUnoReturn, needs reconversion
 
     if (pReturnTypeDescr)
     {
@@ -452,7 +452,7 @@ void cpp_call(
     for ( sal_Int32 nPos = 0; nPos < nParams; ++nPos )
     {
         const typelib_MethodParameter & rParam = pParams[nPos];
-        typelib_TypeDescription * pParamTypeDescr = nullptr;
+        typelib_TypeDescription * pParamTypeDescr = 0;
         TYPELIB_DANGER_GET( &pParamTypeDescr, rParam.pTypeRef );
 
         if (!rParam.bOut && bridges::cpp_uno::shared::isSimpleType( pParamTypeDescr ))
@@ -553,7 +553,7 @@ void cpp_call(
         }
 
         // NO exception occurred...
-        *ppUnoExc = nullptr;
+        *ppUnoExc = 0;
 
         // reconvert temporary params
         for ( ; nTempIndices--; )
@@ -565,7 +565,7 @@ void cpp_call(
             {
                 if (pParams[nIndex].bOut) // inout
                 {
-                    uno_destructData( pUnoArgs[nIndex], pParamTypeDescr, nullptr ); // destroy uno value
+                    uno_destructData( pUnoArgs[nIndex], pParamTypeDescr, 0 ); // destroy uno value
                     uno_copyAndConvertData( pUnoArgs[nIndex], pCppArgs[nIndex], pParamTypeDescr,
                                             pThis->getBridge()->getCpp2Uno() );
                 }
@@ -642,8 +642,8 @@ void unoInterfaceProxyDispatch(
             // dependent dispatch
             cpp_call(
                 pThis, aVtableSlot,
-                reinterpret_cast<typelib_InterfaceAttributeTypeDescription const *>(pMemberDescr)->pAttributeTypeRef,
-                0, nullptr, // no params
+                ((typelib_InterfaceAttributeTypeDescription *)pMemberDescr)->pAttributeTypeRef,
+                0, 0, // no params
                 pReturn, pArgs, ppException );
         }
         else
@@ -651,11 +651,11 @@ void unoInterfaceProxyDispatch(
             // is SET
             typelib_MethodParameter aParam;
             aParam.pTypeRef =
-                reinterpret_cast<typelib_InterfaceAttributeTypeDescription const *>(pMemberDescr)->pAttributeTypeRef;
-            aParam.bIn      = true;
-            aParam.bOut     = false;
+                ((typelib_InterfaceAttributeTypeDescription *)pMemberDescr)->pAttributeTypeRef;
+            aParam.bIn      = sal_True;
+            aParam.bOut     = sal_False;
 
-            typelib_TypeDescriptionReference * pReturnTypeRef = nullptr;
+            typelib_TypeDescriptionReference * pReturnTypeRef = 0;
             OUString aVoidName("void");
             typelib_typedescriptionreference_new(
                 &pReturnTypeRef, typelib_TypeClass_VOID, aVoidName.pData );
@@ -691,31 +691,31 @@ void unoInterfaceProxyDispatch(
             // standard calls
         case 1: // acquire uno interface
             (*pUnoI->acquire)( pUnoI );
-            *ppException = nullptr;
+            *ppException = 0;
             break;
         case 2: // release uno interface
             (*pUnoI->release)( pUnoI );
-            *ppException = nullptr;
+            *ppException = 0;
             break;
         case 0: // queryInterface() opt
         {
-            typelib_TypeDescription * pTD = nullptr;
-            TYPELIB_DANGER_GET( &pTD, static_cast< Type * >( pArgs[0] )->getTypeLibType() );
+            typelib_TypeDescription * pTD = 0;
+            TYPELIB_DANGER_GET( &pTD, reinterpret_cast< Type * >( pArgs[0] )->getTypeLibType() );
             if (pTD)
             {
-                uno_Interface * pInterface = nullptr;
+                uno_Interface * pInterface = 0;
                 (*pThis->getBridge()->getUnoEnv()->getRegisteredInterface)(
                     pThis->getBridge()->getUnoEnv(),
-                    reinterpret_cast<void **>(&pInterface), pThis->oid.pData, reinterpret_cast<typelib_InterfaceTypeDescription *>(pTD) );
+                    (void **)&pInterface, pThis->oid.pData, (typelib_InterfaceTypeDescription *)pTD );
 
                 if (pInterface)
                 {
                     ::uno_any_construct(
-                        static_cast< uno_Any * >( pReturn ),
-                        &pInterface, pTD, nullptr );
+                        reinterpret_cast< uno_Any * >( pReturn ),
+                        &pInterface, pTD, 0 );
                     (*pInterface->release)( pInterface );
                     TYPELIB_DANGER_RELEASE( pTD );
-                    *ppException = nullptr;
+                    *ppException = 0;
                     break;
                 }
                 TYPELIB_DANGER_RELEASE( pTD );
@@ -725,9 +725,9 @@ void unoInterfaceProxyDispatch(
             // dependent dispatch
             cpp_call(
                 pThis, aVtableSlot,
-                reinterpret_cast<typelib_InterfaceMethodTypeDescription const *>(pMemberDescr)->pReturnTypeRef,
-                reinterpret_cast<typelib_InterfaceMethodTypeDescription const *>(pMemberDescr)->nParams,
-                reinterpret_cast<typelib_InterfaceMethodTypeDescription const *>(pMemberDescr)->pParams,
+                ((typelib_InterfaceMethodTypeDescription *)pMemberDescr)->pReturnTypeRef,
+                ((typelib_InterfaceMethodTypeDescription *)pMemberDescr)->nParams,
+                ((typelib_InterfaceMethodTypeDescription *)pMemberDescr)->pParams,
                 pReturn, pArgs, ppException );
         }
         break;
@@ -740,7 +740,7 @@ void unoInterfaceProxyDispatch(
 
         Type const & rExcType = cppu::UnoType<decltype(aExc)>::get();
         // binary identical null reference
-        ::uno_type_any_construct( *ppException, &aExc, rExcType.getTypeLibType(), nullptr );
+        ::uno_type_any_construct( *ppException, &aExc, rExcType.getTypeLibType(), 0 );
     }
     }
 }
-- 
2.32.0

From 4d4678d1a442071e284da00b7d7019cda34c9804 Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Fri, 20 Aug 2021 09:22:04 +0200
Subject: [PATCH 3/5] Revert "Fix some warnings for Raspberry pi 4 (part2)"

This reverts commit 6e3424ca1131fe371f63e456267de476b5eb0eae.
---
 ...om_sun_star_comp_beans_LocalOfficeWindow.c | 10 -----
 .../source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx |  2 +-
 .../source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx | 40 ++++++++-----------
 include/jvmaccess/classpath.hxx               |  7 ----
 include/jvmaccess/virtualmachine.hxx          |  7 ----
 include/jvmfwk/framework.hxx                  |  7 ----
 javaunohelper/source/preload.cxx              |  7 ----
 ...star_lib_connections_pipe_PipeConnection.c |  8 ----
 .../sunmajor/pluginlib/sunjavaplugin.cxx      |  8 ----
 9 files changed, 18 insertions(+), 78 deletions(-)

diff --git a/bean/native/unix/com_sun_star_comp_beans_LocalOfficeWindow.c b/bean/native/unix/com_sun_star_comp_beans_LocalOfficeWindow.c
index 9e534e2262d9..bf58455ec907 100644
--- a/bean/native/unix/com_sun_star_comp_beans_LocalOfficeWindow.c
+++ b/bean/native/unix/com_sun_star_comp_beans_LocalOfficeWindow.c
@@ -23,20 +23,10 @@
 #include <X11/Xutil.h>
 #include <X11/Intrinsic.h>
 
-// to deal with gcc specific attribute "externally_visible" used in
-// /usr/lib/jvm/java-11-openjdk-armhf/include/linux/jni_md.h:35
-// via /usr/lib/jvm/java-11-openjdk-armhf/include/jni.h
-#if defined __clang__
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunknown-attributes"
-#endif
 #include <jni.h>
 
 #include <jawt_md.h>
 #include <jawt.h>
-#if defined __clang__
-#pragma clang diagnostic pop
-#endif
 
 #include <sal/types.h>
 
diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx b/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
index 7abaed395488..9a59044ba8b3 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
@@ -28,7 +28,7 @@
 #include <typelib/typedescription.hxx>
 
 #include <bridge.hxx>
-#include <cppinterfaceproxy.hxx>
+#include "cppinterfaceproxy.hxx"
 #include <types.hxx>
 #include <vtablefactory.hxx>
 
diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx b/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx
index bed9d7a0af96..8a455ad2d072 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx
@@ -100,7 +100,7 @@ using namespace ::com::sun::star::uno;
 
 namespace arm
 {
-    static bool is_complex_struct(const typelib_TypeDescription * type)
+    bool is_complex_struct(const typelib_TypeDescription * type)
     {
         const typelib_CompoundTypeDescription * p
             = reinterpret_cast< const typelib_CompoundTypeDescription * >(type);
@@ -126,7 +126,7 @@ namespace arm
     }
 
 #ifdef __ARM_PCS_VFP
-    static bool is_float_only_struct(const typelib_TypeDescription * type)
+    bool is_float_only_struct(const typelib_TypeDescription * type)
     {
         const typelib_CompoundTypeDescription * p
             = reinterpret_cast< const typelib_CompoundTypeDescription * >(type);
@@ -165,7 +165,7 @@ namespace arm
     }
 }
 
-static void MapReturn(sal_uInt32 r0, sal_uInt32 r1, typelib_TypeDescriptionReference * pReturnType, sal_uInt32* pRegisterReturn)
+void MapReturn(sal_uInt32 r0, sal_uInt32 r1, typelib_TypeDescriptionReference * pReturnType, sal_uInt32* pRegisterReturn)
 {
     switch( pReturnType->eTypeClass )
     {
@@ -187,11 +187,8 @@ static void MapReturn(sal_uInt32 r0, sal_uInt32 r1, typelib_TypeDescriptionRefer
 #if !defined(__ARM_PCS_VFP) && (defined(__ARM_EABI__) || defined(__SOFTFP__))
             pRegisterReturn[0] = r0;
 #else
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wuninitialized"
-            register float fret asm("s0");
-            *reinterpret_cast<float *>(pRegisterReturn) = fret;
-#pragma clang diagnostic pop
+            register float fret asm = "s0";
+            *(float*)pRegisterReturn = fret;
 #endif
         break;
         case typelib_TypeClass_DOUBLE:
@@ -199,11 +196,8 @@ static void MapReturn(sal_uInt32 r0, sal_uInt32 r1, typelib_TypeDescriptionRefer
             pRegisterReturn[1] = r1;
             pRegisterReturn[0] = r0;
 #else
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wuninitialized"
-            register double dret asm("d0");
-            *reinterpret_cast<double *>(pRegisterReturn) = dret;
-#pragma clang diagnostic pop
+            register double dret asm= "d0";
+            *(double*)pRegisterReturn = dret;
 #endif
             break;
         case typelib_TypeClass_STRUCT:
@@ -251,7 +245,7 @@ void callVirtualMethod(
     {
         // 8-bytes aligned
         sal_uInt32 nStackBytes = ( ( nStack + 1 ) >> 1 ) * 8;
-        sal_uInt32 *stack = static_cast<sal_uInt32 *>(__builtin_alloca( nStackBytes * sizeof(sal_uInt32)));
+        sal_uInt32 *stack = (sal_uInt32 *) __builtin_alloca( nStackBytes );
         memcpy( stack, pStack, nStackBytes );
     }
 
@@ -259,9 +253,9 @@ void callVirtualMethod(
     if ( nGPR > arm::MAX_GPR_REGS )
         nGPR = arm::MAX_GPR_REGS;
 
-    sal_uInt32 pMethod = *static_cast<sal_uInt32 *>(pThis);
+    sal_uInt32 pMethod = *((sal_uInt32*)pThis);
     pMethod += 4 * nVtableIndex;
-    pMethod = *reinterpret_cast<sal_uInt32 *>(pMethod);
+    pMethod = *((sal_uInt32 *)pMethod);
 
     //Return registers
     sal_uInt32 r0;
@@ -292,7 +286,7 @@ void callVirtualMethod(
         : [pmethod]"m" (pMethod), [pgpr]"m" (pGPR), [pfpr]"m" (pFPR)
         : "r0", "r1", "r2", "r3", "r4", "r5");
 
-    MapReturn(r0, r1, pReturnType, static_cast<sal_uInt32*>(pRegisterReturn));
+    MapReturn(r0, r1, pReturnType, (sal_uInt32*)pRegisterReturn);
 }
 }
 
@@ -387,7 +381,7 @@ void callVirtualMethod(
 
 namespace {
 
-void cpp_call(
+static void cpp_call(
     bridges::cpp_uno::shared::UnoInterfaceProxy * pThis,
     bridges::cpp_uno::shared::VtableSlot aVtableSlot,
     typelib_TypeDescriptionReference * pReturnTypeRef,
@@ -395,8 +389,8 @@ void cpp_call(
     void * pUnoReturn, void * pUnoArgs[], uno_Any ** ppUnoExc )
 {
     // max space for: [complex ret ptr], values|ptr ...
-    sal_uInt32 * pStack = static_cast<sal_uInt32 *>(__builtin_alloca(
-        sizeof(sal_Int32) + ((nParams+2) * sizeof(sal_Int64)) ));
+    sal_uInt32 * pStack = (sal_uInt32 *)__builtin_alloca(
+        sizeof(sal_Int32) + ((nParams+2) * sizeof(sal_Int64)) );
     sal_uInt32 * pStackStart = pStack;
 
     sal_uInt32 pGPR[arm::MAX_GPR_REGS];
@@ -441,11 +435,11 @@ void cpp_call(
     // stack space
     static_assert(sizeof(void *) == sizeof(sal_Int32), "### unexpected size!");
     // args
-    void ** pCppArgs  = static_cast<void **>(alloca( 3 * sizeof(void *) * nParams ));
+    void ** pCppArgs  = (void **)alloca( 3 * sizeof(void *) * nParams );
     // indices of values this have to be converted (interface conversion cpp<=>uno)
-    sal_Int32 * pTempIndices = reinterpret_cast<sal_Int32 *>(pCppArgs + nParams);
+    sal_Int32 * pTempIndices = (sal_Int32 *)(pCppArgs + nParams);
     // type descriptions for reconversions
-    typelib_TypeDescription ** ppTempParamTypeDescr = reinterpret_cast<typelib_TypeDescription **>(pCppArgs + (2 * nParams));
+    typelib_TypeDescription ** ppTempParamTypeDescr = (typelib_TypeDescription **)(pCppArgs + (2 * nParams));
 
     sal_Int32 nTempIndices   = 0;
 
diff --git a/include/jvmaccess/classpath.hxx b/include/jvmaccess/classpath.hxx
index 80da5cb3c36a..d1e1c658a44c 100644
--- a/include/jvmaccess/classpath.hxx
+++ b/include/jvmaccess/classpath.hxx
@@ -22,14 +22,7 @@
 
 #include <sal/config.h>
 
-#if defined __clang__
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunknown-attributes"
-#endif
 #include <jni.h>
-#if defined __clang__
-#pragma clang diagnostic pop
-#endif
 
 #include <jvmaccess/jvmaccessdllapi.h>
 #include <rtl/ustring.hxx>
diff --git a/include/jvmaccess/virtualmachine.hxx b/include/jvmaccess/virtualmachine.hxx
index 22b224e348b6..a95668cdfa32 100644
--- a/include/jvmaccess/virtualmachine.hxx
+++ b/include/jvmaccess/virtualmachine.hxx
@@ -24,14 +24,7 @@
 #include <rtl/ref.hxx>
 #include <salhelper/simplereferenceobject.hxx>
 
-#if defined __clang__
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunknown-attributes"
-#endif
 #include <jni.h>
-#if defined __clang__
-#pragma clang diagnostic pop
-#endif
 
 namespace jvmaccess
 {
diff --git a/include/jvmfwk/framework.hxx b/include/jvmfwk/framework.hxx
index 8f7eb8a2ad29..8b2e36e935fc 100644
--- a/include/jvmfwk/framework.hxx
+++ b/include/jvmfwk/framework.hxx
@@ -30,14 +30,7 @@
 #include <jvmfwk/jvmfwkdllapi.hxx>
 #include <rtl/byteseq.hxx>
 #include <rtl/ustring.hxx>
-#if defined __clang__
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunknown-attributes"
-#endif
 #include <jni.h>
-#if defined __clang__
-#pragma clang diagnostic pop
-#endif
 
 /** @file
     <p>This library can operate in two modes, application mode and direct mode.</p>
diff --git a/javaunohelper/source/preload.cxx b/javaunohelper/source/preload.cxx
index f73b44b34647..4868a1e55f5e 100644
--- a/javaunohelper/source/preload.cxx
+++ b/javaunohelper/source/preload.cxx
@@ -19,14 +19,7 @@
 
 #include <sal/config.h>
 
-#if defined __clang__
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunknown-attributes"
-#endif
 #include <jni.h>
-#if defined __clang__
-#pragma clang diagnostic pop
-#endif
 
 #include <rtl/ustring.hxx>
 #include <osl/module.hxx>
diff --git a/jurt/source/pipe/com_sun_star_lib_connections_pipe_PipeConnection.c b/jurt/source/pipe/com_sun_star_lib_connections_pipe_PipeConnection.c
index 58e6185614f2..9b7806b8a07a 100644
--- a/jurt/source/pipe/com_sun_star_lib_connections_pipe_PipeConnection.c
+++ b/jurt/source/pipe/com_sun_star_lib_connections_pipe_PipeConnection.c
@@ -21,15 +21,7 @@
 
 #include <stdlib.h>
 
-#if defined __clang__
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunknown-attributes"
-#endif
 #include <jni.h>
-#if defined __clang__
-#pragma clang diagnostic pop
-#endif
-
 #include <osl/security.h>
 #include <osl/pipe.h>
 
diff --git a/jvmfwk/plugins/sunmajor/pluginlib/sunjavaplugin.cxx b/jvmfwk/plugins/sunmajor/pluginlib/sunjavaplugin.cxx
index 5df7ef298795..ee0a1ec81fa7 100644
--- a/jvmfwk/plugins/sunmajor/pluginlib/sunjavaplugin.cxx
+++ b/jvmfwk/plugins/sunmajor/pluginlib/sunjavaplugin.cxx
@@ -54,15 +54,7 @@
 #include <setjmp.h>
 #include <signal.h>
 
-#if defined __clang__
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunknown-attributes"
-#endif
 #include <jni.h>
-#if defined __clang__
-#pragma clang diagnostic pop
-#endif
-
 #include <rtl/byteseq.hxx>
 #include <fwkbase.hxx>
 #include <elements.hxx>
-- 
2.32.0

From 02458fddf14ef744389b287a6331e31e5ae2812a Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Fri, 20 Aug 2021 09:22:07 +0200
Subject: [PATCH 4/5] Revert "Add rtti.hxx for gcc3_linux_arm"

This reverts commit f014efeb2e715d2f52be882c59cd981816d0821a.
---
 .../source/cpp_uno/gcc3_linux_arm/rtti.hxx    | 33 -------------------
 1 file changed, 33 deletions(-)
 delete mode 100644 bridges/source/cpp_uno/gcc3_linux_arm/rtti.hxx

diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/rtti.hxx b/bridges/source/cpp_uno/gcc3_linux_arm/rtti.hxx
deleted file mode 100644
index 7057cb4ed161..000000000000
--- a/bridges/source/cpp_uno/gcc3_linux_arm/rtti.hxx
+++ /dev/null
@@ -1,33 +0,0 @@
-/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
-/*
- * This file is part of the LibreOffice project.
- *
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- *
- * This file incorporates work covered by the following license notice:
- *
- *   Licensed to the Apache Software Foundation (ASF) under one or more
- *   contributor license agreements. See the NOTICE file distributed
- *   with this work for additional information regarding copyright
- *   ownership. The ASF licenses this file to you under the Apache
- *   License, Version 2.0 (the "License"); you may not use this file
- *   except in compliance with the License. You may obtain a copy of
- *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
- */
-
-#pragma once
-
-#include <sal/config.h>
-
-#include <typeinfo>
-
-#include <typelib/typedescription.h>
-
-namespace arm
-{
-std::type_info* getRtti(typelib_TypeDescription const& type);
-}
-
-/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
-- 
2.32.0

From 75b231ecde40a8b1678140ad86d284108076f720 Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Fri, 20 Aug 2021 09:22:09 +0200
Subject: [PATCH 5/5] Revert "Fix some warnings for Raspberry pi 4 (part1)"

This reverts commit 7b36e8718036377ad5e370151099aa15c3c9a067.
---
 .../source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx |  8 ++---
 .../source/cpp_uno/gcc3_linux_arm/except.cxx  | 29 +++++++++----------
 .../source/cpp_uno/gcc3_linux_arm/share.hxx   |  6 ++--
 .../source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx |  6 ++--
 4 files changed, 24 insertions(+), 25 deletions(-)

diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx b/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
index 9a59044ba8b3..4ef17b8542e1 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/cpp2uno.cxx
@@ -23,14 +23,14 @@
 #include <sal/log.hxx>
 
 #include <com/sun/star/uno/genfunc.hxx>
-#include <com/sun/star/uno/RuntimeException.hpp>
+#include "com/sun/star/uno/RuntimeException.hpp"
 #include <uno/data.h>
 #include <typelib/typedescription.hxx>
 
-#include <bridge.hxx>
+#include "bridge.hxx"
 #include "cppinterfaceproxy.hxx"
-#include <types.hxx>
-#include <vtablefactory.hxx>
+#include "types.hxx"
+#include "vtablefactory.hxx"
 
 #include "share.hxx"
 
diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/except.cxx b/bridges/source/cpp_uno/gcc3_linux_arm/except.cxx
index 367604f3ed11..251fbe09857f 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/except.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/except.cxx
@@ -27,11 +27,10 @@
 #include <sal/log.hxx>
 
 #include <com/sun/star/uno/genfunc.hxx>
-#include <com/sun/star/uno/RuntimeException.hpp>
+#include "com/sun/star/uno/RuntimeException.hpp"
 #include <typelib/typedescription.hxx>
 #include <uno/any2.h>
 #include <unordered_map>
-#include "rtti.hxx"
 #include "share.hxx"
 
 
@@ -64,7 +63,7 @@ namespace CPPU_CURRENT_NAMESPACE
         while ('E' != *p)
         {
             // read chars count
-            long n = *p++ - '0';
+            long n = (*p++ - '0');
             while ('0' <= *p && '9' >= *p)
             {
                 n *= 10;
@@ -258,18 +257,18 @@ namespace CPPU_CURRENT_NAMESPACE
             ::uno_copyAndConvertData( pCppExc, pUnoExc->pData, pTypeDescr, pUno2Cpp );
 
             // destruct uno exception
-            ::uno_any_destruct( pUnoExc, 0 );
-            // avoiding locked counts
-            static RTTI rtti_data;
-            rtti = (type_info*)rtti_data.getRTTI((typelib_CompoundTypeDescription*)pTypeDescr);
-            TYPELIB_DANGER_RELEASE( pTypeDescr );
-            assert(rtti && "### no rtti for throwing exception!");
-            if (! rtti)
-            {
-                throw RuntimeException(
-                    OUString("no rtti for type ") +
-                    OUString::unacquired( &pUnoExc->pType->pTypeName ) );
-            }
+           ::uno_any_destruct( pUnoExc, 0 );
+           // avoiding locked counts
+           static RTTI rtti_data;
+           rtti = (type_info*)rtti_data.getRTTI((typelib_CompoundTypeDescription*)pTypeDescr);
+           TYPELIB_DANGER_RELEASE( pTypeDescr );
+           assert(rtti && "### no rtti for throwing exception!");
+           if (! rtti)
+           {
+               throw RuntimeException(
+                   OUString("no rtti for type ") +
+                   OUString::unacquired( &pUnoExc->pType->pTypeName ) );
+           }
         }
 
         __cxa_throw( pCppExc, rtti, deleteException );
diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/share.hxx b/bridges/source/cpp_uno/gcc3_linux_arm/share.hxx
index 040ce60b9251..284d2b6ffbee 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/share.hxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/share.hxx
@@ -17,7 +17,7 @@
  *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
  */
 #pragma once
-#include <sal/config.h>
+#include "sal/config.h"
 
 #include <typeinfo>
 #include <exception>
@@ -29,8 +29,8 @@
 #define _GLIBCXX_CDTOR_CALLABI
 #endif
 
-#include <config_cxxabi.h>
-#include <uno/mapping.h>
+#include "config_cxxabi.h"
+#include "uno/mapping.h"
 
 #if !HAVE_CXXABI_H_CLASS_TYPE_INFO
 // <https://mentorembedded.github.io/cxx-abi/abi.html>,
diff --git a/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx b/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx
index 8a455ad2d072..b71ab2acbb0b 100644
--- a/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx
+++ b/bridges/source/cpp_uno/gcc3_linux_arm/uno2cpp.cxx
@@ -22,7 +22,7 @@
 
 #include <com/sun/star/uno/genfunc.hxx>
 #include <com/sun/star/uno/Exception.hpp>
-#include <com/sun/star/uno/RuntimeException.hpp>
+#include "com/sun/star/uno/RuntimeException.hpp"
 #include <o3tl/runtimetooustring.hxx>
 #include <uno/data.h>
 
@@ -187,7 +187,7 @@ void MapReturn(sal_uInt32 r0, sal_uInt32 r1, typelib_TypeDescriptionReference *
 #if !defined(__ARM_PCS_VFP) && (defined(__ARM_EABI__) || defined(__SOFTFP__))
             pRegisterReturn[0] = r0;
 #else
-            register float fret asm = "s0";
+            register float fret asm("s0");
             *(float*)pRegisterReturn = fret;
 #endif
         break;
@@ -196,7 +196,7 @@ void MapReturn(sal_uInt32 r0, sal_uInt32 r1, typelib_TypeDescriptionReference *
             pRegisterReturn[1] = r1;
             pRegisterReturn[0] = r0;
 #else
-            register double dret asm= "d0";
+            register double dret asm("d0");
             *(double*)pRegisterReturn = dret;
 #endif
             break;
-- 
2.32.0

